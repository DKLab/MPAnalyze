 function varargout = pathAnalyzeGUI_export(varargin)
% GUI to analyse the data scanned with pathGUI

% change log:
% 2009-12-14: fixed 'rename' function
% 2009-08-07: correct scaling
% 2009-08-07: newest version
% 2009-05-18: now loads header in handles.dataMpd.Header
% 2009-05-07: now only loading part of the data at a time, for longer datasets
% 2009-04-02: added code to cut out sub-objects in intensity and look
% 2009-03-19: usable code, does diameters, draws paths, etc.
% 2011-02-19: now work to queue for offline analysis
% DATA ANALYSIS magic number 2^20 These lines were added to allow the program to stop
% before crashing CELINE MATEO 20111116
% CELINE MATEO implement to get the name of the open in the command window
% CELINE MATEO change to get the mirror voltage = to 2.5 V for Rig 2 this
% is found in the PATH GUI OPEN

% Last Modified by GUIDE v2.5 08-Aug-2014 11:17:17

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @pathAnalyzeGUI_export_OpeningFcn, ...
                   'gui_OutputFcn',  @pathAnalyzeGUI_export_OutputFcn, ...
                   'gui_LayoutFcn',  @pathAnalyzeGUI_export_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before pathAnalyzeGUI_export is made visible.
function pathAnalyzeGUI_export_OpeningFcn(hObject, ~, handles, varargin) %#ok<*DEFNU>
  
    
    handles.output = hObject;  % Choose default command line output for pathAnalyzeGUI
    
    % get the MPBus that was passed in from the mod manager
    if nargin > 3
        handles.mpbus = varargin{1};
    else
        handles.mpbus = MPBus(hObject);
    end
    
    %% user code here ...
    handles.mpbus.scanData = [];            % data from MATLAB, initialize to empty
    handles.scanResult3d = [];        % data from mpscope, initialize to empty
    handles.scanResult2d = [];        % data from mpscope, initialize to empty
    handles.scanResult1d = [];        % data from mpscope, initialize to empty
    
    %%%%% REMOVE THESE
    %handles.fileDirectory = '.\';     % initial file directory
    %handles.fileNameMat = '';         % holds name of Matlab file
    %handles.fileNameHDF = '';         % holds name of HDF5 file
    %handles.imageCh = 1;              % holds imaging channel to load
                                      % selected with pop-up, but default to 1

    % code for analysing data later
    handles.analyzeLater = false;    
    handles.analyzeLaterFilename = '';     % fid to write structures to analyse later
    handles.analyzeLaterIndex = 0;         % not currently used

    %%%%%% END REMOVE
    
    %mjp 2011.05.02
    set(gcf,'name','pathAnalyzeExtraGUI v0.3')
    
    guidata(hObject, handles); % Update handles structure

    % UIWAIT makes pathAnalyzeGUI_export wait for user response (see UIRESUME)
    % uiwait(handles.figure1);

% --- Outputs from this function are returned to the command line.
function varargout = pathAnalyzeGUI_export_OutputFcn(~, ~, handles) 

    varargout{1} = handles.output;

% --- BUTTON - Load Data - MATLAB
% TODO: Remove the need to load a Matlab open.
%       Everything should be in the HDF5 open anyway.
function pushButtonLoadDataMat_Callback(hObject, eventdata, handles)
    %{
    [handles.fileNameMat,handles.fileDirectory] = uigetfile([handles.fileDirectory '*.mat'],'open file - MATLAB (*.mat)'); % open file

    if ~verifyFile([handles.fileDirectory handles.fileNameMat], '.mat')
        return;
    end
    
    set(handles.figure1,'Name',['pathAnalyzeGUI     ' handles.fileNameMat '     ' handles.fileNameHDF]);
    
    load([handles.fileDirectory handles.fileNameMat]);      % load the MATLAB data here

    handles.mpbus.scanData = scanData;                            % place scan data in handles
    
    guidata(hObject, handles);                              % Update handles structure
    
    pushButtonResetImage_Callback(hObject, eventdata, handles);  % draw image
    %}

% --- Load HDF5 Data
function loadFile(hObject, eventdata, handles) 
    
    [fileName, filePath] = uigetfile('*.h5','open file - HDF5 (*.h5)'); % open file

    fullFileName = [filePath fileName];
    if ~MPBus.verifyFile(fullFileName, '.h5')
        return;
    end

    % TODO: need better way to display which file is open
    %set(handles.figure1,'Name',['pathAnalyzeGUI_export     ' fileName]);
    
    success = handles.mpbus.open(fullFileName);
    if ~success
        disp('failed to open');
    end
    
    % put the scanData on the MPWorkspace
    handles.mpbus.output('scanData', handles.mpbus.scanData);
    
    % set the channel list
    % TODO: need a new way to display channel list
    %{
    popUpChannel = findobj('Tag', 'popUpChannel');
    channelCellArray = num2cell(handles.mpbus.channelList);
    
    set(popUpChannel, 'String', channelCellArray);
    %}
    
    % initialize
   
    figure(handles.figure1)    % return control to this figure, after the hdfRead
    
    % REMOVING LINE PROJECTION:
    %{
    % take the 1d data as a projection of this (first 1000 lines)...    
    handles.scanResult1d = mean(handles.scanDataLines100);   % average collapse to a single line
    handles.scanResult1d = handles.scanResult1d(:);            % make a column vector
    
    
    %%% sets up a bunch of things, once the data is loaded ...
    
    % check to make sure data is loaded
    if isempty( handles.scanResult1d )
        warndlg( '.h5 (HDF5 from MpScope) file was not loaded ...')
        return;
    end
    %}
    
    if isempty( handles.mpbus.scanData )
        warndlg( '.h5 (HDF5 from MpScope) did not have scan data associated with it ...')
        return;
    end
    
    
    % sr1 = handles.scanResult1d;          % 'scan result 1d'
    
    % populate the path listbox
    populatePathListbox(handles);

    
    pushButtonResetImage_Callback(hObject, eventdata, handles);  % draw image

    handles.nPoints = handles.mpbus.xsize ...
                      * handles.mpbus.ysize ...
                      * handles.mpbus.numFrames;
    
    % total number of lines in scanned data              
    handles.nLines = handles.mpbus.ysize ...
                     * handles.mpbus.numFrames;      
    handles.nPointsPerLine = handles.mpbus.xsize;

    handles.timePerLine = handles.nPointsPerLine * handles.mpbus.scanData.dt;
    
    %round minimum window duration (or time per line) to tenths of ms
    set(handles.minWin,'String',...
        num2str(round(handles.timePerLine*1e4)/10));
    
    % display some stuff for the user ...
    disp(['  total scan time (s): ' num2str(handles.nPoints * handles.mpbus.scanData.dt)])
    disp(['  time per line (ms): ' num2str(handles.nPointsPerLine * handles.mpbus.scanData.dt * 1000)])
    disp(['  scan frequency (Hz): ' num2str(1 / (handles.nPointsPerLine * handles.mpbus.scanData.dt))])
    disp(['  distance between pixels (in ROIs) (mV): ' num2str(handles.mpbus.scanData.scanVelocity *1e3)])
    disp(['  time between pixels (us): ' num2str(1e6*handles.mpbus.scanData.dt)])

    disp ' '
    disp ' initialize completed successfully '
    
    
    guidata(hObject, handles); % Update handles structure
    
    function drawLineScan(handles, startingLine)
        

    
% --- BUTTON - Draw Scan Path
function pushButtonDrawScanPath_Callback(hObject, eventdata, handles)
    % check to make sure data was loaded
    if isempty( handles.scanResult1d )
        warndlg( 'oops, it appears that a .h5 (HDF5 from MpScope) file was not loaded ...')
        return;   
    end
    
    if isempty( handles.mpbus.scanData )
        return;
    end
    
    sr1 = handles.scanResult1d;          % 'scan result 1d'
    path = handles.mpbus.scanData.path;        % 'scan path'
    
    % plot the scan path here ...
    set(handles.figure1,'CurrentAxes',handles.axesTopView)
    nPoints = size(path,1);
    hold on
    
    % scale the scan result for 0 to 1
    sr1scaled = sr1;
    sr1scaled = sr1scaled - min(sr1scaled);
    sr1scaled = sr1scaled ./ max(sr1scaled);
   
    %colormap(reverse(gray))
    %colormap('default')
    %colormap(gray);
    
    %C = flipud(colormap);
    %C = flipup(get(gca,'colormap'));
    %colormap(C);
    %set(gca,'colormap',C')
    
    drawEveryPoints = 10;
    
    set(handles.figure1,'CurrentAxes',handles.axesTopView)

    for i = 1:drawEveryPoints:nPoints      % skip points, if the user requests
        
        %color = hsv2rgb([i/nPoints,1,1]);    
        %color = hsv2rgb([0,0,sr1scaled(i)]);        % plot intensity, black and white
        %color = [sr1scaled(i),0,0]                   % plot intensity as RED
        %color = [sr1scaled(i)/3 , sr1scaled(i) , sr1scaled(i)/3]                  % plot intensity as RED
        
        color = 'red';
        plot(path(i,1),path(i,2),'.','color',color)
        drawnow
    end
    
    % find the values from the image and the ideal path
    nRows = size(handles.mpbus.scanData.im,1);
    nCols = size(handles.mpbus.scanData.im,2);
    
    sr1im = 0*sr1;      % will hold the scan result, scanning ideal path across image
    
    % scale voltage coordinates to matrix coordinates
    xMinV = handles.mpbus.scanData.axisLimCol(1);
    xMaxV = handles.mpbus.scanData.axisLimCol(2);
    yMinV = handles.mpbus.scanData.axisLimRow(1);
    yMaxV = handles.mpbus.scanData.axisLimRow(2);

%% mjp commented out after feb 2011? try adding back in
    % Ilya's corrections for scaling
    %the +1 term is to account that we start at 1st pixel (not 0) but we end at 
    % nCol-1+1 pixel. Same for row. Checked with 512x512, 400x400, and 400x256
    pathImCoords(:,1) = (nCols-1)*(path(:,1)-xMinV)/(xMaxV- xMinV)+1;
    pathImCoords(:,2) = (nRows-1)*(path(:,2)-yMinV)/(yMaxV- yMinV)+1;
    
    imMarked = handles.mpbus.scanData.im;
    markIntensity = max(imMarked(:)) * 1.1;

    for i = 1:nPoints 
        try
            c = round(pathImCoords(i,1));   %jd - note c comes before r!
            r = round(pathImCoords(i,2));

            imMarked(r,c) = markIntensity; 

            sr1im(i) = handles.mpbus.scanData.im(r,c);
        catch
           disp('Point out of bounds'); 
        end
    end
    
    % scale so that data from image matches data acquired from arbs scan ... generally not needed
    sr1im = sr1im/mean(sr1im) * mean(sr1);
    
    % plot some values
    
    figure
   
    plot( [sr1im sr1] )
    legend('from image','from arb scan')
    
    guidata(hObject, handles);         % Update handles structure (save the image)

    pathImCoords(:,1) = path(:,1) * (nRows-1)/(xMaxV- xMinV) + 1 - (nRows-1)/(xMaxV - xMinV)*xMinV;
    pathImCoords(:,2) = path(:,2) * (nCols-1)/(yMaxV- yMinV) + 1 - (nCols-1)/(yMaxV - yMinV)*yMinV;
    
    imMarked = handles.mpbus.scanData.im;
    markIntensity = max(imMarked(:)) * 1.1;

    for i = 1:nPoints 
        c = round(pathImCoords(i,1));   %jd - note c comes before r!
        r = round(pathImCoords(i,2));
                        
        imMarked(r,c) = markIntensity; 
        
        sr1im(i) = handles.mpbus.scanData.im(r,c);
    end
    
    % scale so that data from image matches data acquired from arbs scan ... generally not needed
    sr1im = sr1im/mean(sr1im) * mean(sr1);
    
    % plot some values
    
    figure
    subplot(2,2,1:2)
    plot( [sr1im sr1] )
    legend('from image','from arb scan')
    
    guidata(hObject, handles);         % Update handles structure (save the image)


% --- BUTTON - Reset Image
function pushButtonResetImage_Callback(hObject, eventdata, handles)
    if isempty( handles.mpbus.scanData ) 
        return;
    end

    set(handles.figure1,'CurrentAxes',handles.axesTopView)
    
    cla
    imagesc(handles.mpbus.scanData.axisLimCol,handles.mpbus.scanData.axisLimRow,handles.mpbus.scanData.im);
    axis on
    axis tight
    %colormap('gray');
    colormap('default');


% --- BUTTON - Rename
function pushButtonRename_Callback(hObject, eventdata, handles)    
    newName = inputdlg('type in new name (or enter to keep old name)');  % newName is a cell
    
    if isempty(newName)
        return   % nothing to rename
    end
    
    elementIndex = get(handles.listboxScanCoords,'Value');
    handles.mpbus.scanData.scanCoords(elementIndex).name = newName{1};  
    
    %% populate listbox
    strmat = [];
    for s = 1:length(handles.mpbus.scanData.scanCoords)      
        strmat = strvcat(strmat,handles.mpbus.scanData.scanCoords(s).name);
    end
    set(handles.listboxScanCoords,'String',cellstr(strmat));
    
    guidata(hObject, handles);                                   % Update handles structure
    
% --- helper function, allows user to select other limits
function [userStartPoint userEndPoint] = selectLimit(handles,autoStartPoint,autoEndPoint)
    % make sure the correct portion of the graph is selected, and draw
    im = handles.mpbus.readLines(1:100);
    figure(handles.figure1)
    set(handles.figure1,'CurrentAxes',handles.axesSingleFrame)    
    imagesc(im)   
    colormap('jet')
    hold on
   
    ymax = size(im,1);
    
    %plot values from open (initial guess)
    plot([autoStartPoint autoStartPoint],[1 ymax],'y')
    plot([autoEndPoint autoEndPoint],[1 ymax],'y')

    sp = ginput(1);    % get a user click, note sp(1) is distance across image
    if( sp(1)<1 | sp(1)>size(im,2) | sp(2)<1 | sp(2)>size(im,1))
        userStartPoint = autoStartPoint;   % user clicked outside image, use default point
    else
        userStartPoint = round(sp(1));            % use selected point
    end

    plot([userStartPoint userStartPoint],[1 ymax],'g')

    ep = ginput(1);     % get a user click, note ep(1) is distance across image
    if( ep(1)<1 | ep(1)>size(im,2) | ep(2)<1 | ep(2)>size(im,1))
        userEndPoint = autoEndPoint;     % user clicked outside image
    else
        userEndPoint = round(ep(1));            % use selected point
    end

    plot([userEndPoint userEndPoint],[1 ymax],'r')
    hold off
    

% --- BUTTON - Diameter Transform
function pushButtonDiameterTransform_Callback(hObject, eventdata, handles)
    % Calculate the velocity, using the radon transform
    
    elementIndex = get(handles.listboxScanCoords,'Value');    % grab the selected element
    
    % based on the item selected in the listbox, and the pathObjNum, find
    % the start and end indices
    allIndicesThisObject = find(handles.mpbus.scanData.pathObjNum == elementIndex);
    firstIndexThisObject = allIndicesThisObject(1);
    lastIndexThisObject = allIndicesThisObject(end);

    % let the user change the points, if desired
    [firstIndexThisObject lastIndexThisObject] = ...
        selectLimit(handles,firstIndexThisObject,lastIndexThisObject);
    
    dataStruct = struct( ...
        'fullFileName',handles.mpbus.fullFileName, ... 
        'firstIndexThisObject',firstIndexThisObject, ...
        'lastIndexThisObject',lastIndexThisObject, ...
        'assignName',handles.mpbus.scanData.scanCoords(elementIndex).name, ...
        'windowSize',handles.windowSize, ...
        'windowStep',handles.windowStep,...
        'analysisType','diameter', ...
        'scanVelocity',handles.mpbus.scanData.scanVelocity, ...
        'imageCh',handles.mpbus.activeChannel, ...
        'mpbus', handles.mpbus);

    if handles.analyzeLater
        handles.mpbus.output('dataStruct', dataStruct);
    else
        pathAnalysisHelper(dataStruct);
    end
    
    close(handles.output);

    
    
    % --- Executes on button press in pushButtonIntensity.
function pushButtonIntensity_Callback(hObject, eventdata, handles)
    % Calculate the velocity, using the radon transform
    
    elementIndex = get(handles.listboxScanCoords,'Value');    % grab the selected element
    
    % based on the item selected in the listbox, and the pathObjNum, find
    % the start and end indices
    allIndicesThisObject = find(handles.mpbus.scanData.pathObjNum == elementIndex);
    firstIndexThisObject = allIndicesThisObject(1);
    lastIndexThisObject = allIndicesThisObject(end);
    
    % let the user change the points, if desired
    if get(handles.allowResize,'Value')==1
        [firstIndexThisObject lastIndexThisObject] = ...
            selectLimit(handles,firstIndexThisObject,lastIndexThisObject);
    end
    
    dataStruct = struct( ...
        'fullFileName',handles.mpbus.fullFileName, ... 
        'firstIndexThisObject',firstIndexThisObject, ...
        'lastIndexThisObject',lastIndexThisObject, ...
        'assignName',handles.mpbus.scanData.scanCoords(elementIndex).name, ...
        'windowSize',handles.windowSize, ...
        'windowStep',handles.windowStep,...
        'analysisType','intensity', ...
        'scanVelocity',handles.mpbus.scanData.scanVelocity, ...
        'imageCh',handles.mpbus.activeChannel, ...
        'mpbus', handles.mpbus);
    
    if handles.analyzeLater
        handles.mpbus.output('dataStruct', dataStruct);
    else
        pathAnalysisHelper(dataStruct);
    end
   
% --- BUTTON - Radon Transform
function pushButtonRadonTransform_Callback(hObject, eventdata, handles)
    % Calculate the velocity, using the radon transform
    
    elementIndex = get(handles.listboxScanCoords,'Value');    % grab the selected element
    
    % based on the item selected in the listbox, and the pathObjNum, find
    % the start and end indices
    allIndicesThisObject = find(handles.mpbus.scanData.pathObjNum == elementIndex);
    firstIndexThisObject = allIndicesThisObject(1);
    lastIndexThisObject = allIndicesThisObject(end);
        
    % let the user change the points, if desired
    [firstIndexThisObject lastIndexThisObject] = ...
        selectLimit(handles,firstIndexThisObject,lastIndexThisObject);

    dataStruct = struct( ...
        'fullFileName',handles.mpbus.fullFileName, ... 
        'firstIndexThisObject',firstIndexThisObject, ...
        'lastIndexThisObject',lastIndexThisObject, ...
        'assignName',handles.mpbus.scanData.scanCoords(elementIndex).name, ...
        'windowSize',handles.windowSize, ...
        'windowStep',handles.windowStep,...
        'analysisType','radon', ...
        'scanVelocity',handles.mpbus.scanData.scanVelocity, ...
        'imageCh',handles.mpbus.activeChannel, ...
        'mpbus', handles.mpbus);
    
    
    if handles.analyzeLater
        handles.mpbus.output('dataStruct', dataStruct);
    else
        pathAnalysisHelper(dataStruct);
    end
    
% --- Executes on selection change in listboxScanCoords.
function listboxScanCoords_Callback(hObject, eventdata, handles)
% Hints: contents = get(hObject,'String') returns listboxScanCoords contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listboxScanCoords

    %jd - doesn't really do anything now ...
    % ... should have a check to see if data is loaded ...
    elementIndex = get(handles.listboxScanCoords,'Value');    % grab the selected element
    handles.mpbus.scanData.scanCoords(elementIndex);


% --- Executes during object creation, after setting all properties.
function listboxScanCoords_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end


% --- BUTTON - Draw Scan Regions
function pushButtonDrawScanRegions_Callback(hObject, eventdata, handles)
    % note - this code is copied straight from pathGUI, could be a separate function ...
    % plot the start and endpoints on the graph, and place text
    
    for i = 1:length(handles.mpbus.scanData.scanCoords)
        sc = handles.mpbus.scanData.scanCoords(i);     % copy to a structure, to make it easier to access
        if strcmp(sc.scanShape,'blank')
            break                       % nothing to mark
        end
    
        % mark start and end point 
        set(handles.figure1,'CurrentAxes',handles.axesTopView)
        hold on
        
        plot(sc.startPoint(1),sc.startPoint(2),'g*')
        plot(sc.endPoint(1),sc.endPoint(2),'r*')
        
        % draw a line or box (depending on data structure type)
        if strcmp(sc.scanShape,'line')
            line([sc.startPoint(1) sc.endPoint(1)],[sc.startPoint(2) sc.endPoint(2)],'linewidth',2)
        elseif strcmp(sc.scanShape,'box')
            % width and height must be > 0 to draw a box
            boxXmin = min([sc.startPoint(1),sc.endPoint(1)]);
            boxXmax = max([sc.startPoint(1),sc.endPoint(1)]);
            boxYmin = min([sc.startPoint(2),sc.endPoint(2)]);
            boxYmax = max([sc.startPoint(2),sc.endPoint(2)]);
                
            rectangle('Position',[boxXmin,boxYmin, ...
                boxXmax-boxXmin,boxYmax-boxYmin], ...
                'EdgeColor','green');
        end
        
        % find a point to place text
        placePoint = sc.startPoint + .1*(sc.endPoint-sc.startPoint);
        text(placePoint(1)-.1,placePoint(2)+.05,sc.name,'color','red','FontSize',12)

    end

    colormap 'jet'

    

% --- BUTTON - Look ...
function pushButtonLook_Callback(hObject, eventdata, handles)
    % take the radon transform, would need to call Patrick's code ...
    elementIndex = get(handles.listboxScanCoords,'Value');    % grab the selected element
        
    % the data is held in:
    %   handles.mpbus.scanData.scanResult3d
    % marks for what part of the path corresponds to what are in:
    %   handles.mpbus.scanData.pathObjNum
    
    % for the item selected in the listbox, find the start and end indices, and cut out data
     
    % find the indices of this scan object, subject to the constraint that the subObjectNum is non-zero
    % subOjectNum being non-zero has no effect for lines, but will cut out turn regions for boxes
    %indices = (handles.mpbus.scanData.pathObjNum  == elementIndex & handles.mpbus.scanData.pathObjSubNum > 0);
    indices = (handles.mpbus.scanData.pathObjNum  == elementIndex);

    % cut out data, and image first frame ...
    %lineData = handles.scanResult3d(:,firstIndexThisObject:lastIndexThisObject,1);
    lineData = handles.scanResult3d(:,indices,1);
    
    figure
    subplot(4,2,1:4)
    imagesc(lineData)
    
    % image projection of first frame
    subplot(4,2,5:6)
    lineData = mean(lineData,1);
    plot(lineData)
    a = axis;
    axis( [1 length(lineData) a(3) a(4)] )
    
    % cut out only the sub-object portion, and plot this
    
    % find the indices of this scan object, subject to the constraint that the subObjectNum is non-zero
    % subOjectNum being non-zero has no effect for lines, but will cut out turn regions for boxes
    %indices = (handles.mpbus.scanData.pathObjNum  == elementIndex & handles.mpbus.scanData.pathObjSubNum > 0);
    indices = (handles.mpbus.scanData.pathObjNum  == elementIndex & handles.mpbus.scanData.pathObjSubNum > 0);

    % cut out data, and image first frame ...
    %lineData = handles.scanResult3d(:,firstIndexThisObject:lastIndexThisObject,1);
    lineData = handles.scanResult3d(:,indices,1);
    
    % 
    subplot(4,2,7:8)
    lineData = mean(lineData,1);
    plot(lineData)
    a = axis;
    axis( [1 length(lineData) a(3) a(4)] )
    
       
    
%--- EDIT (enter) - Window Size (in milliseconds)
function editWindowSizeMs_Callback(hObject, eventdata, handles)
    handles.windowSize = 1e-3*str2double(get(hObject,'String'));  % store as seconds
    guidata(hObject, handles);   % Update handles structure

% --- EDIT (creation) - Window Size (in milliseconds)
function editWindowSizeMs_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
    editWindowSizeMs_Callback(hObject, eventdata, handles)   % execute, to read initial value
    

%--- EDIT (enter) - Window Step (in milliseconds)
function editWindowStepMs_Callback(hObject, eventdata, handles)
    handles.windowStep = 1e-3*str2double(get(hObject,'String'));  % store as seconds
    guidata(hObject, handles);   % Update handles structure


% --- EDIT (creation) - Window Step (in milliseconds)
function editWindowStepMs_CreateFcn(hObject, eventdata, handles)
    if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
        set(hObject,'BackgroundColor','white');
    end
    editWindowStepMs_Callback(hObject, eventdata, handles)   % execute, to read initial value


% --- BUTTON - Analyse Stored Selections
function pushButtonAnalyseStoredSelections_Callback(hObject, eventdata, handles)
    % not curretly used
    return;

% --- CHECKBOX - Queue Values (analyse later.
function checkboxQueueValues_Callback(hObject, eventdata, handles)
    value = get(handles.checkboxQueueValues,'Value');

    %{
    if value == true;
        c = clock;
        % elements are year, month, day, hour, minute, seconds
        s = '_'; % the space character, goes between the elements of the data
        c = [num2str(c(1)) s num2str(c(2)) s num2str(c(3)) s num2str(c(4)) s num2str(c(5)) s num2str(round(c(6)))];
    
        handles.analyzeLaterFilename =  ['a' c '.m']; 
        handles.analyzeLater = true;    
        
        % write the header info
        fid = fopen(handles.analyzeLaterFilename,'a');
        
        % ... \% escape sequence does not work ... ?
        fprintf(fid,['%% analysis file for ' handles.fileNameMat ' ' handles.fileNameHDF '\n']);
        fprintf(fid,['%% created ' num2str(c(1)) '-' num2str(c(2)) '-' num2str(c(3)) '\n']);
                
        fprintf(fid,'dataStructArray = []; \n\n');
        fclose(fid);
    else
        handles.analyzeLater = false;
    end
    %}
    
    handles.analyzeLater = value;
    guidata(hObject, handles);   % Update handles structure

function writeForLater(dataStruct,handles)
    % write this stuff to appropriate filename    
    
    fid = fopen(handles.analyzeLaterFilename,'a');
    
    escapedFilename = regexprep(dataStruct.fullFileNameHDF,'\\','\\\');  % changes \ to \\
    
    fprintf(fid,'dataStruct = struct( ...\n');
    fprintf(fid,[' ''fullFileNameHDF'',' '''' escapedFilename '''' ', ...\n'] ,'char');
    fprintf(fid,[' ''firstIndexThisObject'',' '' num2str(dataStruct.firstIndexThisObject) '' ', ...\n'],'char');
    fprintf(fid,[' ''lastIndexThisObject'',' '' num2str(dataStruct.lastIndexThisObject) '' ', ...\n'],'char');   
    fprintf(fid,[' ''assignName'',' '''' dataStruct.assignName '''' ', ...\n'],'char');
    fprintf(fid,[' ''windowSize'',' num2str(dataStruct.windowSize) ', ...\n'],'char');
    fprintf(fid,[' ''windowStep'',' num2str(dataStruct.windowStep) ', ...\n'],'char');
    fprintf(fid,[' ''analysisType'',' '''' dataStruct.analysisType '''' ', ...\n'],'char');
    fprintf(fid,[' ''scanVelocity'',' num2str(dataStruct.scanVelocity) ', ...\n'],'char');
    fprintf(fid,[' ''imageCh'',' num2str(dataStruct.imageCh) ' ...\n'],'char');
    fprintf(fid,');\n');
    
    fprintf(fid,'dataStructArray = [dataStructArray dataStruct];\n');
    
    fprintf(fid,'\n');
  
    fclose(fid);


% --- Executes on selection change in popUpChannel.
function popUpChannel_Callback(hObject, eventdata, handles)
% hObject    handle to popUpChannel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popUpChannel contents as cell array
%        contents = get(hObject,'Value') returns selected item from popUpChannel
    index = get(hObject,'Value');
    channelList = get(hObject, 'String');
    
    % remember which image channel the user selected by saving it as the
    % MPBus activeChannel. When MPBus performs read operations, it will do
    % so for the image channel specified by activeChannel
    channelNumber = str2double(channelList{index});
    if ~isnan(channelNumber)
        handles.mpbus.activeChannel = channelNumber;
    end
    
    guidata(hObject, handles); % Update handles structure
    
% --- Executes during object creation, after setting all properties.
function popUpChannel_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popUpChannel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in allowResize.
function allowResize_Callback(hObject, eventdata, handles)
% hObject    handle to allowResize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Utility Functions
function populatePathListbox(handles)
    % TODO: UPDATE REQUIRED
    %       I'm not sure how to display the paths at the moment
    %       So for now this will be commented out.
    %{
    % start with an empty string matrix and populate
    % it with the names of every path in scanCoords  
    strmat = [];
    
    for s = 1:length(handles.mpbus.scanData.scanCoords)      
        strmat = char(strmat,handles.mpbus.scanData.scanCoords(s).name);
    end

    strcell = cellstr(strmat);   % convert to a cell array
    % then remove any empty cells
    strcell_nospace = strcell(~cellfun('isempty', strcell));
   
    % use cellstr to convert the matrix into a form that
    % the listbox will accept.
    set(handles.listboxScanCoords,'String',strcell_nospace);
    %}


% --------------------------------------------------------------------
function MainMenu_Callback(hObject, eventdata, handles)
% hObject    handle to Open (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%{
% --------------------------------------------------------------------
function Open_Callback(hObject, eventdata, handles)
% hObject    handle to Open (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Calculations_Callback(hObject, eventdata, handles)
% hObject    handle to Calculations (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Diamter_Callback(hObject, eventdata, handles)
% hObject    handle to Diamter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Intensity_Callback(hObject, eventdata, handles)
% hObject    handle to Intensity (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Velocity_Callback(hObject, eventdata, handles)
% hObject    handle to Velocity (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%}

% --------------------------------------------------------------------
function menu_file_Callback(hObject, eventdata, handles)
% hObject    handle to menu_file (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_open_Callback(hObject, eventdata, handles)
% hObject    handle to menu_open (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
loadFile(hObject, eventdata, handles);


% --------------------------------------------------------------------
function menu_image_Callback(hObject, eventdata, handles)
% hObject    handle to menu_image (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_calculate_Callback(hObject, eventdata, handles)
% hObject    handle to menu_calculate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_diameter_Callback(hObject, eventdata, handles)
% hObject    handle to menu_diameter (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_intensity_Callback(hObject, eventdata, handles)
% hObject    handle to menu_intensity (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_velocity_Callback(hObject, eventdata, handles)
% hObject    handle to menu_velocity (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_drawScanRegion_Callback(hObject, eventdata, handles)
% hObject    handle to menu_drawScanRegion (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_drawScanPath_Callback(hObject, eventdata, handles)
% hObject    handle to menu_drawScanPath (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function menu_resetImage_Callback(hObject, eventdata, handles)
% hObject    handle to menu_resetImage (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on slider movement.
function slider1_Callback(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function slider1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to slider1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Creates and returns a handle to the GUI figure. 
function h1 = pathAnalyzeGUI_export_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'pushbutton', 14, ...
    'axes', 12, ...
    'uipanel', 15, ...
    'text', 7, ...
    'edit', 4, ...
    'popupmenu', 4, ...
    'listbox', 3, ...
    'checkbox', 3, ...
    'uitoolbar', 2, ...
    'uipushtool', 3, ...
    'slider', 2), ...
    'override', 1, ...
    'release', 13, ...
    'resize', 'simple', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', 'C:\Users\Jeff\Documents\MATLAB\MPAnalyze\pathAnalyzeGUI_export.m', ...
    'lastFilename', 'C:\Users\Jeff\Documents\MATLAB\MPAnalyze\Path Analysis\pathAnalyzeGUI.fig');
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'Units','characters',...
'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'MenuBar','none',...
'Name','pathAnalyzeGUI',...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'Position',[103.8 12.6153846153846 200.4 48.8461538461538],...
'HandleVisibility','callback',...
'UserData',[],...
'Tag','figure1',...
'Visible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanel8';

h2 = uipanel(...
'Parent',h1,...
'Title','Top Down View',...
'Clipping','on',...
'BackgroundColor',get(0,'defaultuipanelBackgroundColor'),...
'Position',[0.234530938123751 0.464566929133858 0.374251497005987 0.496062992125984],...
'Tag','uipanel8',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axesTopView';

h3 = axes(...
'Parent',h2,...
'Position',[0.0512129380053908 0.063758389261745 0.905660377358491 0.916107382550336],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[0.138140417457305 0.113235294117647 0.100948766603416 0.0772058823529411],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','axesTopView',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h4 = get(h3,'title');

set(h4,...
'Parent',h3,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.498511904761905 1.02380952380952 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h5 = get(h3,'xlabel');

set(h5,...
'Parent',h3,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.498511904761905 -0.031135531135531 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h6 = get(h3,'ylabel');

set(h6,...
'Parent',h3,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0193452380952381 0.496336996336996 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h7 = get(h3,'zlabel');

set(h7,...
'Parent',h3,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.763392857142857 1.16300366300366 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'uipanel10';

h8 = uipanel(...
'Parent',h1,...
'Title','Line Scan',...
'Clipping','on',...
'BackgroundColor',get(0,'defaultuipanelBackgroundColor'),...
'Position',[0.0129740518962076 0.0078740157480315 0.973053892215569 0.453543307086614],...
'Tag','uipanel10',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axesSingleFrame';

h9 = axes(...
'Parent',h8,...
'Position',[0.0267765190525232 0.0885608856088561 0.914521112255407 0.870848708487085],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[0.307376093294461 0.258171641791045 0.224620991253645 0.176026119402985],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','axesSingleFrame',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h10 = get(h9,'title');

set(h10,...
'Parent',h9,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.499436936936937 1.02754237288136 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h11 = get(h9,'xlabel');

set(h11,...
'Parent',h9,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.499436936936937 -0.0360169491525419 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h12 = get(h9,'ylabel');

set(h12,...
'Parent',h9,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.00731981981981982 0.49364406779661 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h13 = get(h9,'zlabel');

set(h13,...
'Parent',h9,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0467342342342342 2.55296610169492 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'slider1';

h14 = uicontrol(...
'Parent',h8,...
'Units','normalized',...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('slider1_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[0.952626158599382 0.0664206642066421 0.0257466529351184 0.904059040590406],...
'String',{  'Slider' },...
'Style','slider',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)pathAnalyzeGUI_export('slider1_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','slider1');

appdata = [];
appdata.lastValidTag = 'menu_file';

h15 = uimenu(...
'Parent',h1,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_file_Callback',hObject,eventdata,guidata(hObject)),...
'Label','File',...
'Tag','menu_file',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_open';

h16 = uimenu(...
'Parent',h15,...
'Accelerator','O',...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_open_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Open...',...
'Tag','menu_open',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_image';

h17 = uimenu(...
'Parent',h1,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_image_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Image',...
'Tag','menu_image',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_drawScanRegion';

h18 = uimenu(...
'Parent',h17,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_drawScanRegion_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Draw Scan Region',...
'Tag','menu_drawScanRegion',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_drawScanPath';

h19 = uimenu(...
'Parent',h17,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_drawScanPath_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Draw Scan Path',...
'Tag','menu_drawScanPath',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_resetImage';

h20 = uimenu(...
'Parent',h17,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_resetImage_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Reset Image',...
'Tag','menu_resetImage',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_calculate';

h21 = uimenu(...
'Parent',h1,...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_calculate_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Calculate',...
'Tag','menu_calculate',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_diameter';

h22 = uimenu(...
'Parent',h21,...
'Accelerator','D',...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_diameter_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Diameter',...
'Tag','menu_diameter',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_intensity';

h23 = uimenu(...
'Parent',h21,...
'Accelerator','I',...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_intensity_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Intensity',...
'Tag','menu_intensity',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'menu_velocity';

h24 = uimenu(...
'Parent',h21,...
'Accelerator','V',...
'Callback',@(hObject,eventdata)pathAnalyzeGUI_export('menu_velocity_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Velocity',...
'Tag','menu_velocity',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanel12';

h25 = uipanel(...
'Parent',h1,...
'Title','Side View',...
'Clipping','on',...
'BackgroundColor',get(0,'defaultuipanelBackgroundColor'),...
'Position',[0.609780439121756 0.464566929133858 0.374251497005988 0.496062992125984],...
'Tag','uipanel12',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'axesSideView';

h26 = axes(...
'Parent',h25,...
'Position',[0.0504201680672269 0.0648464163822526 0.904761904761905 0.914675767918089],...
'CameraPosition',[0.5 0.5 9.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[0.138140417457305 0.113235294117647 0.100948766603416 0.0772058823529411],...
'XColor',get(0,'defaultaxesXColor'),...
'XTick',[],...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YTick',[],...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'Tag','axesSideView',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h27 = get(h26,'title');

set(h27,...
'Parent',h26,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 1.02380952380952 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h28 = get(h26,'xlabel');

set(h28,...
'Parent',h26,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.497014925373134 -0.031135531135531 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','cap',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h29 = get(h26,'ylabel');

set(h29,...
'Parent',h26,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0194029850746269 0.496336996336996 1.00005459937205],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h30 = get(h26,'zlabel');

set(h30,...
'Parent',h26,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','right',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-1.88805970149254 1.16300366300366 1.00005459937205],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'uipanel14';

h31 = uipanel(...
'Parent',h1,...
'Title','Controls',...
'Clipping','on',...
'BackgroundColor',get(0,'defaultuipanelBackgroundColor'),...
'Position',[0.0149700598802395 0.464566929133858 0.217564870259481 0.496062992125984],...
'Tag','uipanel14',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % PATHANALYZEGUI_EXPORT
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % PATHANALYZEGUI_EXPORT(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % PATHANALYZEGUI_EXPORT('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % PATHANALYZEGUI_EXPORT(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
    %workaround for CreateFcn not called to create ActiveX
    if feature('HGUsingMATLABClasses')
        peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
        for i=1:length(peers)
            if isappdata(peers(i),'Control')
                actxproxy(peers(i));
            end            
        end
    end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


